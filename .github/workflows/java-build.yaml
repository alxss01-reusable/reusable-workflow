name: Build

on:
  workflow_call:
    inputs:
      name:
        required: false
        type: string

jobs:
  build:
    runs-on: ${{ vars.RUNNER_LOCAL }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: App Variables
        id: variables
        uses: alxss01-actions/app-variables@main

      - name: Valida Java e Maven Instalados
        run: |
          javaVersion=$(java --version)
          mavenVersion=$(mvn --version)

          if [[ -z $javaVersion ]]; then
            echo -e "O Java não está instalado...\n"
            installJavaMaven="true" >> $GITHUB_ENV
          else
            echo -e "JAVA INSTALADO!\n"
            echo -e "JAVA VERSION: $javaVersion\n"
            echo -e "MAVEN VERSION: $mavenVersion\n"
            installJavaMaven="false" >> $GITHUB_ENV
          fi

      - name: SetUp Java
        if: ${{ env.installJavaMaven == 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "maven"

      - name: Maven Build
        run: mvn -B package --file pom.xml

      - name: Sonar Scan
        id: sonar-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        uses: alxss01-actions/sonar-scan@main
        with:
          projectName: ${{ steps.variables.outputs.artifactId }}
          projectKey: "${{ steps.variables.outputs.groupId }}:${{ steps.variables.outputs.artifactId }}"
          appVersion: ${{ steps.variables.outputs.appVersion }}
          url: ${{ vars.SONAR_LOCAL_URL }}
          token: $SONAR_TOKEN

      - name: Print Saída Sonar Scan Test
        run: |
          echo "${{ steps.sonar-scan.outputs.time }}"

      - name: Valida Resultado Sonar
        env:
          projectKey: "${{ steps.variables.outputs.groupId }}:${{ steps.variables.outputs.artifactId }}"
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          url: ${{ vars.SONAR_LOCAL_URL }}
        run: |
          response=$(curl -s -H "Authorization: Bearer $SONAR_TOKEN" -X GET "http://localhost:9000/api/qualitygates/project_status?projectKey=$projectKey")
          echo "Response: $response"
          resultado=$(echo $response | jq -r '.projectStatus .status')
          echo $resultado
